apply plugin: 'spring-boot'
apply plugin: 'java'
apply plugin: 'com.github.hierynomus.license'

archivesBaseName = 'SERVICE_GIT_PROJECT_NAME'

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    junitVersion = '4.12'
    hamcrestVersion = '1.3'
    mockserverVersion = '3.10.2'
    springVersion = '4.2.4.RELEASE'
    springBootVersion = '1.3.3.RELEASE'
    slf4jVersion = '1.7.11'
    jacksonVersion = '2.6.3'
    sleuthVersion = '1.0.0.RC2'
    eurekaVersion='1.2.3.RELEASE'
}

buildscript {
    repositories {
        maven {
            url 'https://artifactory.global.dish.com/artifactory/repo'
        }
    }
    dependencies {
        ext{
            springBootVersion = '1.3.3.RELEASE'
        }
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion",
                'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.12.1'
    }
}

repositories {
    maven {
        url 'https://artifactory.global.dish.com/artifactory/repo'
    }
}

import org.gradle.logging.StyledTextOutputFactory

import static org.gradle.logging.StyledTextOutput.Style

bootRun {
    addResources = true
    systemProperty 'logging.config', 'src/main/resources/logback-local.xml'
}

//colored output borrowed from https://github.com/biasedbit/gradle-plugins/blob/master/colored-test-output.gradle
System.setProperty('org.gradle.color.failure', 'RED')
System.setProperty('org.gradle.color.progressstatus', 'YELLOW')
System.setProperty('org.gradle.color.success', 'GREEN')

dependencies {
    compile(
            project(':common-utils'),
            'org.json:json:20140107',

            "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
            "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",

            "org.slf4j:slf4j-api:$slf4jVersion",
            "org.springframework.boot:spring-boot-configuration-processor:$springBootVersion",
            "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion",
            "org.springframework.boot:spring-boot-starter-web:$springBootVersion",
            "org.springframework.boot:spring-boot:$springBootVersion",

            "org.springframework:spring-core:$springVersion",
            "org.springframework:spring-beans:$springVersion",
            "org.springframework:spring-aop:$springVersion",
            "org.springframework:spring-context:$springVersion",

            "org.springframework.integration:spring-integration-core:$springVersion",
            "org.springframework.integration:spring-integration-ws:$springVersion",
            "org.springframework.integration:spring-integration-http:$springVersion",

            'io.pivotal.spring.cloud:spring-cloud-services-starter-config-client:1.3.1.RELEASE',
            "org.springframework.cloud:spring-cloud-starter-eureka:$eurekaVersion",

            'org.objenesis:objenesis:2.1',
            "org.springframework.cloud:spring-cloud-sleuth-core:$sleuthVersion",
            "org.springframework.cloud:spring-cloud-sleuth-stream:$sleuthVersion",
            "org.springframework.cloud:spring-cloud-sleuth-zipkin-stream:$sleuthVersion",
            'com.dish.zipkin:DishZipkin:1.0.0',
            'com.dish.core:metrics-service-health:1.0.7',

            'io.springfox:springfox-swagger-ui:2.4.0',
            'io.springfox:springfox-swagger2:2.4.0'
    )

    testCompile(
            project(':common-utils'),
            "org.springframework.boot:spring-boot-starter-test:$springBootVersion",
            "org.springframework:spring-test:$springVersion",

            "junit:junit:$junitVersion",
            "org.hamcrest:hamcrest-library:$hamcrestVersion",
            'com.jayway.restassured:rest-assured:2.5.0',
            'com.jayway.restassured:json-schema-validator:2.5.0',
            'com.jayway.jsonpath:json-path:2.0.0',
            "org.mock-server:mockserver-integration-testing:$mockserverVersion",
            "org.mock-server:mockserver-netty:$mockserverVersion",
    )
}

task listAllDependencies(type: DependencyReportTask) {}

test {
    if (project.hasProperty('excludeTests')) {
        exclude project.property('excludeTests')
    }

    testLogging {
        exceptionFormat = 'full'
    }

    def out = services.get(StyledTextOutputFactory).create('colored-test-output')
    out.style(Style.Normal)

    beforeSuite { suite ->
        if (suite.name.startsWith('Test Run') || suite.name.startsWith('Gradle Worker')) return
        out.println("\n" + suite.name)
    }
    afterTest { descriptor, result ->
        def style
        if (result.failedTestCount > 0) style = Style.Failure
        else if (result.skippedTestCount > 0) style = Style.ProgressStatus
        else style = Style.Success

        out.text('  ').withStyle(style).println(descriptor.name)
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task cloneSchema(type: Exec) {
    delete 'src/test/resources/schemas/'
    ignoreExitValue false
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    commandLine 'git', 'clone', 'https://gitlab.global.dish.com/contracts/contracts.git', 'src/test/resources/schemas'
}

task pullSchema(type: Exec, dependsOn: cloneSchema) {
    standardOutput = new ByteArrayOutputStream()
    commandLine 'git', '-C', 'src/test/resources/schemas', 'pull'
}

test.dependsOn pullSchema

task jarWithSources(type: Jar, dependsOn: classes) {
    classifier = 'source'
    from sourceSets.main.allSource
    from sourceSets.main.output
}

task cloneLicenses(type: Exec) {
    delete 'doc'
    ignoreExitValue false
    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    commandLine 'git', 'clone', 'https://gitlab.global.dish.com/contracts/licenses.git', 'doc'
}

defaultTasks 'clean', 'build'